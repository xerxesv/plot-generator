<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Plot generator</title>
    

    <link href="https://fonts.googleapis.com/css?family=PT+Mono" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Lato:400,900" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="/css/main.css" />
    <link rel="stylesheet" type="text/css" href="/css/plot-generator2.css" />
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/velocity/1.5.0/velocity.min.js"></script>
    <script src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/2/velocity.ui.min.js"></script>
    
    <script>
      var loading = false;
      var plot = {};

// $.Velocity.RegisterUI("callout.twirl", {
//     defaultDuration: 3000,
//     calls: [ 
//       [ { rotateX: 1080 }, 1, {easing:'spring'} ]
//       // [ { scaleX: 0.5 }, 0.25, { easing: "spring" } ],
//       // [ { scaleX: 1 }, 0.25, { easing: "spring" } ]
//     ],
//     reset:{rotateX:0}
// });
// Velocity.RegisterEffect("callout.twirl", {
//   defaultDuration: 3000,
//   calls: [ 
//     [ { rotateX: 1080 }, 0.50 ],
//     [ { scaleX: 0.5 }, 0.25, { easing: "spring" } ],
//     [ { scaleX: 1 }, 0.25, { easing: "spring" } ]
//   ]
// })
// $("#test").velocity("callout.twirl");
      /*
      Velocity(document.getElementById("dummy"), { opacity: 0.5 }, { duration: 1000 });
      Velocity( document.getElementById("dummy"), 'callout.twirl' )
      $("div").velocity("callout.twirl");
      */
      function requestPlot () {        
        var xhr = new XMLHttpRequest();
        var error = false;
        var attempts = 0;
        var newPlot = {};
        xhr.open('GET', 'generate', true);

        xhr.onload = function () {
          
          if (xhr.status === 200) {
            try {              
              newPlot = JSON.parse(xhr.responseText);
              plot = newPlot;
            }
            catch (error) {
              handleError( new Error('bad json') );
              error = true;
            }            
          }
          else {           
           handleError(new Error('bad xhr request. status: ' + xhr.status));
           error = true;
          }
          // stop animating plot fields one by one
          // set field text to the appropriate key in plot (or placeholder)
          // bad requests/bad json will just use the old value
          console.log( plot );          
        }

        xhr.send();
        // start animating plot fields
        animatePlotFields();

        function animatePlotFields () {
          // hack - assumes xhr response is available by the time animation is done or it restarts
          $('.plotElement').each( function (index) {
            var $fieldText = $(this).find('.fieldText');
            var delayPerField = index * 200;
            var fieldName = $fieldText.attr('id');

            $fieldText
              .velocity({ rotateX: 1080 }, {
                delay: delayPerField,
                duration:1500, 
                easing:'ease-in-out'
              })
              .velocity('reverse', {easing:'spring', duration:3000});

            $fieldText
              .children('.inner')
              .velocity({opacity:0}, {
                delay: delayPerField + 1500,
                duration:800,
                // queue:false,
                complete:function (elements) {
                  var fieldText = newPlot[fieldName];
                  if (fieldText) {
                    $(elements).text(fieldText).removeClass('placeholder')
                  }
                  else {
                    $(elements).text('??').addClass('placeholder')
                  }
                }
              })
              .velocity('reverse', {
                delay:1200,
                duration:100,
                complete:null
              })          

          });
        }

      }

      function animatePlotFields (newPlot) {
        newPlot = newPlot || {};
        // hack - assumes xhr response is available by the time animation is done or it restarts
        $('.plotElement').each( function (index) {
          var $fieldText = $(this).find('.fieldText');
          var delayPerField = index * 200;
          var fieldName = $fieldText.attr('id');

          $fieldText
            .velocity({ rotateX: 1080 }, {
              delay: delayPerField,
              duration:1500, 
              easing:'ease-in-out'
            })
            .velocity('reverse', {easing:'spring', duration:3000});

          $fieldText
            .children('.inner')
            .velocity({opacity:0}, {
              delay: delayPerField + 1500,
              duration:800,
              // queue:false,
              complete:function (elements) {
                var fieldText = newPlot[fieldName];
                if (fieldText) {
                  $(elements).text(fieldText).removeClass('placeholder')
                }
                else {
                  $(elements).text('??').addClass('placeholder')
                }
              }
            })
            .velocity('reverse', {
              delay:1200,
              duration:100,
              complete:null
            })          

        });
      }
      function animationTest () {
        var element = document.getElementById('test');
        // Velocity(element, {
        //   rotateZ: "45deg"
        // }, {
        //   duration:1000
        // })
        // $(element).velocity({
        //   rotateZ: "45deg"
        // }, {
        //   duration:1000
        // });
        $("#setting").velocity({ rotateX: 360 }, {
          duration:400,
          loop:true
          // complete: function ($elements) {
          //   $elements.velocity({rotateX:0}, {duration:300})
          // }
        });
        // Velocity(element, 'callout.twirl');
        // $('#setting').velocity({
        //   rotateX:360
        // },{
        //   duration:500,
        //   // easing:'spring',
        //   loop:true
        // })


      }
      function animationTest2 () {
        $('#protagonist')
        .velocity({ rotateX: 1080 }, {duration:1500, easing:'ease-in-out'})
        .velocity('reverse', {
          easing:'spring', 
          duration:3000,
        });

       $('#protagonist')
        .children('.inner')
        .velocity({opacity:0}, {
          delay: 1500,
          duration:800,
          // queue:false,
          complete:function (elements) {
            if ($(elements).hasClass('placeholder')) {
              $(elements).text('ddd').removeClass('placeholder')
            }  
            else {
              $(elements).text('??').addClass('placeholder')
            }
          }
        })
        .velocity('reverse', {
          delay:1200,
          duration:100,
          complete:null
        })
      }  
      function animationStop () {
        var element = document.getElementById('test');
        $('#setting')
        .velocity('finish');


        // $('#setting')
        // .velocity({ rotateX: 1080 }, {duration:1500, easing:'ease-in-out'})
        // .velocity('reverse', {easing:'spring', duration:3000});

        // $('#setting').velocity('finish', true);
        // .velocity({
        //   translateX:45,
        // },
        // {
        //   duration:200,
        //   loop:false
        // })
        // .velocity('finish')
        // .velocity('reverse',{
        //   // easing:'spring'
        // })

      }

      function handleError (err) {
        console.log(err.message || 'I am error');
        console.log(err);
      }
    </script>
  </head>
  <body>
    <div class="outerContainer">
      <div class="buttons">
        <button id="generateButton" class="generateButton" onClick="requestPlot()">WHOOAAAA</button>
      </div>
      <div class="innerContainer">
        <% fields.forEach( function(fieldName) { %>
          <div class="plotElement" id="plotElement<%= fieldName %>">
            <div class="fieldTitle">
              <%= fieldName %>
            </div>
            <div id="<%= fieldName %>" class="fieldText">
              <div class="inner placeholder">??</div>
            </div>
          </div>
        <% }); %>
      </div>
    </div>
  </body>
</html>